{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet LogonComponent = class LogonComponent {\n  constructor(log, route) {\n    this.log = log;\n    this.route = route;\n    this.email = \"\";\n    this.password = \"\";\n    this.status = false;\n    // Register Variables\n    this.rusername = \"\";\n    this.rpassword = \"\";\n    this.vpassword = \"\";\n    this.remail = \"\";\n    this.rstatus = false;\n    // Common variables\n    this.logform = true;\n  }\n  ngOnInit() {}\n  toggle() {\n    this.logform = this.logform ? false : true;\n  }\n  login() {\n    this.error = \"\";\n    if (this.email.length == 0 || this.password.length == 0) this.error = \"Fill all the fields\";else {\n      this.status = true;\n      this.log.login(this.email, this.password).subscribe({\n        next: response => {\n          sessionStorage.setItem(\"username\", response.user.username);\n          sessionStorage.setItem(\"usertype\", response.user.type);\n          sessionStorage.setItem(\"token\", response.accessToken);\n          sessionStorage.setItem(\"email\", response.user.email);\n          this.log.username = response.user.username;\n          this.log.usertype = response.user.type;\n          this.log.token = response.accessToken;\n          this.status = true;\n          if (response.user.type == \"admin\") this.route.navigate(['admin/home']);else this.route.navigate(['user/home']);\n        },\n        error: () => {\n          this.error = \"Invalid Credentials\";\n          this.status = false;\n        }\n      });\n    }\n  }\n  //new User Registration \n  register() {\n    alert(\"Called\");\n    this.rerror = \"\";\n    let emailregex = /^[a-z][a-z0-9_\\.]+@[a-z]{2,5}\\.[a-z]{3,5}$/;\n    if (this.rusername.length == 0 || this.rpassword.length == 0 || this.vpassword.length == 0) this.rerror = \"Fill all the fields\";else if (this.rusername.length < 4) this.rerror = \"Username should be atleast 4 charectars long\";else if (this.rpassword.length < 6) this.rerror = \"password should be atleast 6 charectars long\";else if (this.rpassword != this.vpassword) this.rerror = \"Username and password should match\";else if (!emailregex.test(this.remail)) this.rerror = \"not in email format\";else {\n      this.rstatus = true;\n      this.rstatus = true;\n      let obj = {\n        username: this.rusername,\n        password: this.rpassword,\n        type: \"user\",\n        email: this.remail\n      };\n      this.log.register(obj).subscribe({\n        next: result => {\n          if (result.success == false) alert(\"User already exists\");else {\n            alert(\"User successfully registered\");\n            this.logform = true;\n            this.rstatus = false;\n          }\n        },\n        error: () => {\n          alert(\"There is problem , Please try again or later\");\n          this.rstatus = false;\n        }\n      });\n    }\n  }\n};\nLogonComponent = __decorate([Component({\n  selector: 'app-logon',\n  templateUrl: './logon.component.html',\n  styleUrls: ['./logon.component.css']\n})], LogonComponent);\nexport { LogonComponent };","map":{"version":3,"mappings":"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","names":["Component","LogonComponent","constructor","log","route","ngOnInit","toggle","logform","login","error","email","length","password","status","subscribe","next","response","sessionStorage","setItem","user","username","type","accessToken","usertype","token","navigate","register","alert","rerror","emailregex","rusername","rpassword","vpassword","test","remail","rstatus","obj","result","success","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\D_Drive\\Training\\Angular\\Source\\Angular_Course\\Tasks\\istore\\src\\app\\logon\\logon.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { LogService } from '../services/log.service';\n\n@Component({\n  selector: 'app-logon',\n  templateUrl: './logon.component.html',\n  styleUrls: ['./logon.component.css']\n})\nexport class LogonComponent {\n\n  email:string=\"\";\n  password:string=\"\";\n  error?:string;\n  status:boolean=false;\n \n  // Register Variables\n \n  rusername:string=\"\";\n  rpassword:string=\"\";\n  vpassword:string=\"\";\n  remail:string=\"\";\n  rerror?:string;\n  rstatus:boolean=false\n \n // Common variables\n \n   logform:boolean=true;\n  constructor(private log:LogService,private route:Router) { }\n\n  ngOnInit(): void {\n  }\n\n\n  toggle(){\n    this.logform=this.logform?false:true;\n }\n\n login():void{\n   this.error=\"\";\n   if(this.email.length==0 || this.password.length==0)\n   this.error=\"Fill all the fields\";\n   else{\n     this.status=true;\n     this.log.login(this.email,this.password).subscribe(\n        { next:   (response:any)=>{\n            sessionStorage.setItem(\"username\",response.user.username);\n            sessionStorage.setItem(\"usertype\",response.user.type);\n            sessionStorage.setItem(\"token\",response.accessToken);\n            sessionStorage.setItem(\"email\",response.user.email);\n            this.log.username=response.user.username;\n            this.log.usertype=response.user.type;\n            this.log.token=response.accessToken;\n            this.status=true;\n            if(response.user.type==\"admin\")\n                this.route.navigate(['admin/home']);\n            else\n                this.route.navigate(['user/home']);\n          },\n\n          error:()=>{\n            this.error=\"Invalid Credentials\";\n            this.status=false;\n          }}\n     )\n         }\n }\n\n //new User Registration \n\n register():void{\n    alert(\"Called\");\n     this.rerror=\"\";\n     let emailregex:RegExp=/^[a-z][a-z0-9_\\.]+@[a-z]{2,5}\\.[a-z]{3,5}$/\n\n\n     if(this.rusername.length==0 || this.rpassword.length==0 || this.vpassword.length==0 )\n     this.rerror=\"Fill all the fields\";\n\n     else if(this.rusername.length<4)\n     this.rerror=\"Username should be atleast 4 charectars long\"\n\n     else if(this.rpassword.length<6)\n     this.rerror=\"password should be atleast 6 charectars long\"\n\n     else if(this.rpassword!=this.vpassword)\n     this.rerror=\"Username and password should match\"\n     \n     else if(!emailregex.test(this.remail))\n     this.rerror=\"not in email format\"\n\n    \n     else{\n         this.rstatus=true;\n       \n                  this.rstatus=true;\n                  let obj={username:this.rusername,password:this.rpassword,type:\"user\",email: this.remail}\n                  this.log.register(obj).subscribe({\n                    next: (result:any)=>{\n                         if(result.success == false)\n                           alert(\"User already exists\")\n                         else{\n                         alert(\"User successfully registered\");\n                         this.logform=true;\n                         this.rstatus=false;\n                         }\n                     },\n                     error: ()=>{\n                         alert(\"There is problem , Please try again or later\")\n                         this.rstatus=false;\n                     }}\n                  )\n              }\n          \n     }\n \n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}