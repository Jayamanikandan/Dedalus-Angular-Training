{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LogonService {\n  constructor(http) {\n    this.http = http;\n    this.username = '';\n    this.usertype = '';\n    this.token = '';\n    this.email = '';\n    this.status = false;\n    let username = sessionStorage.getItem(\"username\");\n    let usertype = sessionStorage.getItem(\"usertype\");\n    let token = gsessionStorage.etItem(\"token\");\n    let email = sessionStorage.getItem(\"email\");\n    if (username && usertype) {\n      this.status = true;\n      this.username = username;\n      this.usertype = usertype;\n      this.token = token;\n      this.email = email;\n    }\n  }\n  getStatus() {\n    return this.status;\n  }\n  // To Register a User\n  register(obj) {\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(\"http://localhost:4500/register\", obj, this.httpOptions);\n  }\n  //To check avalailability of mail id and username\n  check(str) {\n    return this.http.get(\"http://localhost:4500/users?username\" + str, this.httpOptions);\n  }\n  // to Login\n  login(email, password) {\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n    return this.http.post(\"http://localhost:4500/login\", {\n      email: email,\n      password: password\n    }, this.httpOptions);\n  }\n  logout() {\n    this.token = \"\";\n    this.username = \"\";\n    this.usertype = \"\";\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"username\");\n    sessionStorage.removeItem(\"usertype\");\n    sessionStorage.removeItem(\"email\");\n  }\n}\nLogonService.ɵfac = function LogonService_Factory(t) {\n  return new (t || LogonService)(i0.ɵɵinject(i1.HttpClient));\n};\nLogonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LogonService,\n  factory: LogonService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,QAAoB,sBAAsB;;;AAM9D,OAAM,MAAOC,YAAY;EAOvBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;IALzB,aAAQ,GAAQ,EAAE;IAClB,aAAQ,GAAQ,EAAE;IAClB,UAAK,GAAK,EAAE;IACZ,UAAK,GAAK,EAAE;IACZ,WAAM,GAAS,KAAK;IAEf,IAAIC,QAAQ,GAACC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;IAC/C,IAAIC,QAAQ,GAACF,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;IAC/C,IAAIE,KAAK,GAACC,eAAe,CAACC,MAAM,CAAC,OAAO,CAAC;IACzC,IAAIC,KAAK,GAACN,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;IACzC,IAAGF,QAAQ,IAAEG,QAAQ,EAAC;MACpB,IAAI,CAACK,MAAM,GAAC,IAAI;MAChB,IAAI,CAACR,QAAQ,GAACA,QAAQ;MACtB,IAAI,CAACG,QAAQ,GAACA,QAAQ;MACtB,IAAI,CAACC,KAAK,GAACA,KAAK;MAChB,IAAI,CAACG,KAAK,GAACA,KAAK;;EAErB;EAEDE,SAAS;IACP,OAAO,IAAI,CAACD,MAAM;EACpB;EAEA;EACAE,QAAQ,CAACC,GAAO;IACd,IAAI,CAACC,WAAW,GAAG;MACjBC,OAAO,EAAE,IAAIjB,WAAW,CAAC;QACvB,cAAc,EAAG;OAEhB;KACJ;IACD,OAAO,IAAI,CAACG,IAAI,CAACe,IAAI,CAAC,gCAAgC,EAACH,GAAG,EAAC,IAAI,CAACC,WAAW,CAAC;EAC9E;EAEA;EAEAG,KAAK,CAACC,GAAO;IACX,OAAO,IAAI,CAACjB,IAAI,CAACkB,GAAG,CAAC,sCAAsC,GAACD,GAAG,EAAC,IAAI,CAACJ,WAAW,CAAC;EACnF;EAEF;EACEM,KAAK,CAACX,KAAS,EAACY,QAAY;IAE1B,IAAI,CAACP,WAAW,GAAG;MACjBC,OAAO,EAAE,IAAIjB,WAAW,CAAC;QACvB,cAAc,EAAG;OAElB;KACF;IACD,OAAO,IAAI,CAACG,IAAI,CAACe,IAAI,CAAC,6BAA6B,EACnD;MAACP,KAAK,EAACA,KAAK;MAACY,QAAQ,EAACA;IAAQ,CAAC,EAC/B,IAAI,CAACP,WAAW,CAAC;EACnB;EAEAQ,MAAM;IACH,IAAI,CAAChB,KAAK,GAAC,EAAE;IACb,IAAI,CAACJ,QAAQ,GAAC,EAAE;IAChB,IAAI,CAACG,QAAQ,GAAC,EAAE;IAChBF,cAAc,CAACoB,UAAU,CAAC,OAAO,CAAC;IAClCpB,cAAc,CAACoB,UAAU,CAAC,UAAU,CAAC;IACrCpB,cAAc,CAACoB,UAAU,CAAC,UAAU,CAAC;IACrCpB,cAAc,CAACoB,UAAU,CAAC,OAAO,CAAC;EACrC;;AAhEWxB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAyB,SAAZzB,YAAY;EAAA0B,YAFX;AAAM","names":["HttpHeaders","LogonService","constructor","http","username","sessionStorage","getItem","usertype","token","gsessionStorage","etItem","email","status","getStatus","register","obj","httpOptions","headers","post","check","str","get","login","password","logout","removeItem","factory","providedIn"],"sourceRoot":"","sources":["C:\\D_Drive\\Training\\Angular\\Source\\Angular_Course\\Tasks\\istore\\src\\app\\services\\logon.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LogonService {\n httpOptions:any;\n username:String='';\n usertype:String='';\n token:any='';\n email:any='';\n status:boolean=false;\n  constructor(private http:HttpClient) {\n      let username=sessionStorage.getItem(\"username\");\n      let usertype=sessionStorage.getItem(\"usertype\");\n      let token=gsessionStorage.etItem(\"token\");\n      let email=sessionStorage.getItem(\"email\");\n      if(username&&usertype){\n        this.status=true;\n        this.username=username;\n        this.usertype=usertype;\n        this.token=token;\n        this.email=email;\n      }\n   }\n\n  getStatus():boolean{\n    return this.status;\n  }\n\n  // To Register a User\n  register(obj:any):Observable<object>{\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json'\n                \n        })\n    }\n    return this.http.post(\"http://localhost:4500/register\",obj,this.httpOptions);\n  }\n\n  //To check avalailability of mail id and username\n\n  check(str:any):Observable<object>{\n    return this.http.get(\"http://localhost:4500/users?username\"+str,this.httpOptions);\n  }\n\n// to Login\n  login(email:any,password:any):Observable<object>{\n \n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type':  'application/json',\n  \n      })\n    }\n    return this.http.post(\"http://localhost:4500/login\",\n    {email:email,password:password},\n    this.httpOptions);\n  }\n\n  logout():void{\n     this.token=\"\";\n     this.username=\"\";\n     this.usertype=\"\";\n     sessionStorage.removeItem(\"token\");\n     sessionStorage.removeItem(\"username\");\n     sessionStorage.removeItem(\"usertype\");\n     sessionStorage.removeItem(\"email\");\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}